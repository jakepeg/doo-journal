import { useGetOwnHomepage, useDeleteJournalEntry, type DecryptedJournalEntry } from '../hooks/useQueries';import { useGetOwnHomepage, useDeleteJournalEntry, type DecryptedJournalEntry } from '../hooks/useQueries';

import { useInternetIdentity } from '../hooks/useInternetIdentity';import { useInternetIdentity } from '../hooks/useInternetIdentity';

import { useNavigate } from '@tanstack/react-router';import { useNavigate } from '@tanstack/react-router';

import { Button } from './ui/button';import { Button } from './ui/button';

import { Card, CardContent, CardHeader, CardTitle } from './ui/card';import { Card, CardContent, CardHeader, CardTitle } from './ui/card';

import { Avatar, AvatarFallback, AvatarImage } from './ui/avatar';import { Avatar, AvatarFallback, AvatarImage } from './ui/avatar';

import { Badge } from './ui/badge';import { Badge } from './ui/badge';

import { Plus, Lock, Globe, Edit, Trash2, Share2 } from 'lucide-react';import { Plus, Lock, Globe, Edit, Trash2, Share2 } from 'lucide-react';

import JournalEntryModal from './JournalEntryModal';import JournalEntryModal from './JournalEntryModal';

import ProfileEditModal from './ProfileEditModal';import ProfileEditModal from './ProfileEditModal';

import ProfileSetupModal from './ProfileSetupModal';import ProfileSetupModal from './ProfileSetupModal';

import { useState, useEffect } from 'react';import { useState, useEffect } from 'react';

import { toast } from 'sonner';import { toast } from 'sonner';



export default function Homepage() {export default function Homepage() {

  console.log('[DEBUG] Homepage: Component mounting');  console.log('[DEBUG] Homepage: Component mounting');

    

  const navigate = useNavigate();  const navigate = useNavigate();

  const { identity } = useInternetIdentity();  const { identity } = useInternetIdentity();

  const { data: homepage, isLoading, error } = useGetOwnHomepage();  const { data: homepage, isLoading, error } = useGetOwnHomepage();

  const [showEntryModal, setShowEntryModal] = useState(false);  const [showEntryModal, setShowEntryModal] = useState(false);

  const [showProfileModal, setShowProfileModal] = useState(false);  const [showProfileModal, setShowProfileModal] = useState(false);

  const [showProfileSetupModal, setShowProfileSetupModal] = useState(false);  const [showProfileSetupModal, setShowProfileSetupModal] = useState(false);

  const [editingEntry, setEditingEntry] = useState<DecryptedJournalEntry | null>(null);  const [editingEntry, setEditingEntry] = useState<DecryptedJournalEntry | null>(null);

  const { mutate: deleteEntry } = useDeleteJournalEntry();  const { mutate: deleteEntry } = useDeleteJournalEntry();



  const renderContent = (content: string) => {  const renderContent = (content: string) => {

    let html = content  let html = content

      .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')    .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')

      .replace(/\*(.*?)\*/g, '<em>$1</em>')    .replace(/\*(.*?)\*/g, '<em>$1</em>')

      .replace(/```(.*?)```/gs, '<pre><code>$1</code></pre>')    .replace(/```(.*?)```/gs, '<pre><code>$1</code></pre>')

      .replace(/`(.*?)`/g, '<code>$1</code>')    .replace(/`(.*?)`/g, '<code>$1</code>')

      .replace(/\n/g, '<br>');    .replace(/\n/g, '<br>');



    return html;  return html;

  };};



  useEffect(() => {useEffect(() => {

    console.log('[DEBUG] Homepage: homepage data changed', homepage);  console.log('[DEBUG] Homepage: homepage data changed', homepage);

      

    // Show profile setup modal if user has no profile  // Show profile setup modal if user has no profile

    if (homepage && !homepage.profile) {  if (homepage && !homepage.profile) {

      console.log('[DEBUG] Homepage: No profile found, showing setup modal');    console.log('[DEBUG] Homepage: No profile found, showing setup modal');

      setShowProfileSetupModal(true);    setShowProfileSetupModal(true);

    }  }

  }, [homepage]);}, [homepage]);



  console.log('[DEBUG] Homepage: Current state', {console.log('[DEBUG] Homepage: Current state', {

    isLoading,  isLoading,

    error,  error,

    homepage,  homepage,

    showProfileSetupModal  showProfileSetupModal

  });});



  // Loading state// Loading state

  if (isLoading || !identity) {if (isLoading || !identity) {

    return (  return (

      <div className="min-h-screen bg-gradient-to-br from-purple-50 via-white to-purple-100 flex items-center justify-center">    <div className="min-h-screen bg-gradient-to-br from-purple-50 via-white to-purple-100 flex items-center justify-center">

        <div className="text-center">      <div className="text-center">

          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-600 mx-auto mb-4"></div>        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-purple-600 mx-auto mb-4"></div>

          <p className="text-gray-600">Loading your journal...</p>        <p className="text-gray-600">Loading your journal...</p>

        </div>      </div>

      </div>    </div>

    );  );

  }}



  // Error state// Error state

  if (error) {if (error) {

    return (  return (

      <div className="min-h-screen bg-gradient-to-br from-purple-50 via-white to-purple-100 flex items-center justify-center">    <div className="min-h-screen bg-gradient-to-br from-purple-50 via-white to-purple-100 flex items-center justify-center">

        <div className="text-center">      <div className="text-center">

          <p className="text-red-600 mb-4">Error loading homepage: {error.message}</p>        <p className="text-red-600 mb-4">Error loading homepage: {error.message}</p>

          <Button onClick={() => window.location.reload()}>Retry</Button>        <Button onClick={() => window.location.reload()}>Retry</Button>

        </div>      </div>

      </div>    </div>

    );  );

  }}



  const handleEditEntry = (entry: DecryptedJournalEntry) => {  const handleEditEntry = (entry: DecryptedJournalEntry) => {

    setEditingEntry(entry);    setEditingEntry(entry);

    setShowEntryModal(true);    setShowEntryModal(true);

  };  };



  const handleDeleteEntry = (entryId: string) => {  const handleDeleteEntry = (entryId: string) => {

    if (window.confirm('Are you sure you want to delete this journal entry?')) {    if (window.confirm('Are you sure you want to delete this journal entry?')) {

      deleteEntry(entryId);      deleteEntry(entryId);

    }    }

  };  };



  const handleEntryClick = (entry: DecryptedJournalEntry) => {  const handleEntryClick = (entry: DecryptedJournalEntry) => {

    if (!identity) return;    if (!identity) return;

    const userId = identity.getPrincipal().toString();    const userId = identity.getPrincipal().toString();

    navigate({ to: '/entry/$userId/$entryId', params: { userId, entryId: entry.id } });    navigate({ to: '/entry/$userId/$entryId', params: { userId, entryId: entry.id } });

  };  };



  const handleNewEntry = () => {  const handleNewEntry = () => {

    navigate({ to: '/add-entry' });    navigate({ to: '/add-entry' });

  };  };

import { useInternetIdentity } from '../hooks/useInternetIdentity';

  return (import { useNavigate } from '@tanstack/react-router';

    <div className="min-h-screen bg-gradient-to-br from-purple-50 via-white to-purple-100">import { Button } from './ui/button';

      <div className="container mx-auto px-4 py-8 max-w-4xl">import { Card, CardContent, CardHeader, CardTitle } from './ui/card';

        {/* Header */}import { Avatar, AvatarFallback, AvatarImage } from './ui/avatar';

        <div className="flex justify-between items-start mb-8">import { Badge } from './ui/badge';

          <div>import { Plus, Lock, Globe, Edit, Trash2, Share2 } from 'lucide-react';

            <h1 className="text-3xl font-bold text-gray-900 mb-2">My Journal</h1>import JournalEntryModal from './JournalEntryModal';

            <p className="text-gray-600">Capture your thoughts, memories, and experiences</p>import ProfileEditModal from './ProfileEditModal';

          </div>import ProfileSetupModal from './ProfileSetupModal';

          import { useState, useEffect } from 'react';

          <div className="flex gap-3">import { toast } from 'sonner';

            <Button

              onClick={handleNewEntry}export default function Homepage() {

              size="sm"  console.log('[DEBUG] Homepage: Component mounting');

              className="bg-purple-600 hover:bg-purple-700 text-white"  

            >  const navigate = useNavigate();

              <Plus className="w-4 h-4 mr-2" />  const { identity } = useInternetIdentity();

              New Entry  const { data: homepage, isLoading, error } = useGetOwnHomepage();

            </Button>  const [showEntryModal, setShowEntryModal] = useState(false);

            <Button  const [showProfileModal, setShowProfileModal] = useState(false);

              variant="outline"  const [showProfileSetupModal, setShowProfileSetupModal] = useState(false);

              size="sm"  const [editingEntry, setEditingEntry] = useState<DecryptedJournalEntry | null>(null);

              onClick={() => setShowProfileModal(true)}  const { mutate: deleteEntry } = useDeleteJournalEntry();

            >

              Edit Profile  const renderContent = (content: string) => {

            </Button>  let html = content

          </div>    .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')

        </div>    .replace(/\*(.*?)\*/g, '<em>$1</em>')

    .replace(/!\[(.*?)\]\((.*?)\)/g, '<img src="$2" alt="$1" class="max-w-full h-auto rounded-lg my-4 shadow-md max-h-[150px] object-contain" crossorigin="anonymous" />')

        {/* Profile Section */}    .replace(/^- (.+)$/gm, '<li>$1</li>')

        {homepage?.profile && (    .replace(/^> (.+)$/gm, '<blockquote class="border-l-4 border-purple-300 pl-4 italic text-gray-600 my-2">$1</blockquote>')

          <Card className="mb-8 border-purple-200 shadow-sm">    .replace(/\n/g, '<br />');

            <CardContent className="p-6">

              <div className="flex items-center gap-4">  // Also handle direct HTML img tags from Quill editor - limit their height on homepage

                <Avatar className="w-16 h-16">  html = html.replace(/<img([^>]*?)style="([^"]*?)"([^>]*?)>/g, (match, beforeStyle, styleContent, afterStyle) => {

                  <AvatarImage     // Add max-height to existing style, preserving original styling

                    src={homepage.profile.profilePicture && homepage.profile.profilePicture.length > 0     const newStyle = styleContent + '; max-height: 150px; object-fit: contain;';

                      ? homepage.profile.profilePicture[0]     return `<img${beforeStyle}style="${newStyle}"${afterStyle} class="rounded-lg my-4 shadow-md">`;

                      : undefined}   });

                  />

                  <AvatarFallback className="bg-purple-100 text-purple-600">  // Handle HTML img tags without style attribute

                    {homepage.profile.name.charAt(0).toUpperCase()}  html = html.replace(/<img(?![^>]*style=)([^>]*?)>/g, '<img$1 style="max-height: 150px; object-fit: contain;" class="max-w-full h-auto rounded-lg my-4 shadow-md">');

                  </AvatarFallback>

                </Avatar>  // Wrap list items in ul

                  html = html.replace(/(<li>.*<\/li>)/s, '<ul class="list-disc list-inside space-y-1 my-4">$1</ul>');

                <div className="flex-1">

                  <h2 className="text-xl font-semibold text-gray-900">  return html;

                    {homepage.profile.name}};

                  </h2>

                  {homepage.profile.bio && (  useEffect(() => {

                    <p className="text-gray-600 mt-1">{homepage.profile.bio}</p>    console.log('[DEBUG] Homepage: State changed', {

                  )}      isLoading,

                </div>      hasHomepage: !!homepage,

              </div>      hasProfile: !!homepage?.profile,

            </CardContent>      profileData: homepage?.profile,

          </Card>      entriesCount: homepage?.entries?.length || 0,

        )}      error: error?.message,

      identity: identity?.getPrincipal().toString()

        {/* Entries Grid */}    });

        {homepage?.entries && homepage.entries.length > 0 ? (

          <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">    // Check if user needs profile setup after homepage data is loaded

            {homepage.entries.map((entry) => (    if (!isLoading && homepage && !homepage.profile) {

              <Card       console.log('[Homepage] No profile found, showing ProfileSetupModal');

                key={entry.id}       setShowProfileSetupModal(true);

                className="hover:shadow-md transition-shadow cursor-pointer border-purple-100"    } else if (!isLoading && homepage && homepage.profile) {

                onClick={() => handleEntryClick(entry)}      console.log('[Homepage] Profile exists, hiding ProfileSetupModal');

              >      setShowProfileSetupModal(false);

                <CardHeader className="pb-3">    }

                  <div className="flex justify-between items-start gap-2">  }, [homepage, isLoading, error, identity]);

                    <CardTitle className="text-lg font-semibold text-gray-900 line-clamp-2 flex-1">

                      {entry.title}  // Functions already defined above - removing duplicates

                    </CardTitle>

                    <div className="flex items-center gap-1 flex-shrink-0">  const handleNewEntry = () => {

                      {entry.isPublic ? (    navigate({ to: '/add-entry' });

                        <Badge variant="secondary" className="bg-green-100 text-green-700 border-green-200">  };

                          <Globe className="w-3 h-3 mr-1" />

                          Public  const handleShare = async () => {

                        </Badge>    if (!identity) return;

                      ) : (    

                        <Badge variant="secondary" className="bg-purple-100 text-purple-700 border-purple-200">    const shareUrl = `${window.location.origin}?user=${identity.getPrincipal().toString()}`;

                          <Lock className="w-3 h-3 mr-1" />    

                          Private    try {

                        </Badge>      // Try fallback method first (more reliable on IC)

                      )}      const textArea = document.createElement('textarea');

                    </div>      textArea.value = shareUrl;

                  </div>      textArea.style.position = 'fixed';

                </CardHeader>      textArea.style.left = '-999999px';

                      textArea.style.top = '-999999px';

                <CardContent className="pt-0">      document.body.appendChild(textArea);

                  <div       textArea.focus();

                    className="text-gray-600 mb-4 line-clamp-3 text-sm leading-relaxed"      textArea.select();

                    dangerouslySetInnerHTML={{ __html: renderContent(entry.content) }}      

                  />      const successful = document.execCommand('copy');

                        document.body.removeChild(textArea);

                  <div className="flex justify-between items-center text-xs text-gray-500">      

                    <span>{new Date(Number(entry.date) / 1000000).toLocaleDateString()}</span>      if (successful) {

                    <div className="flex gap-2">        toast.success('Profile link copied to clipboard!');

                      <Button        return;

                        variant="ghost"      }

                        size="sm"      

                        className="h-8 w-8 p-0 hover:bg-purple-100"      // If fallback fails, try modern API

                        onClick={(e) => {      if (navigator.clipboard && window.isSecureContext) {

                          e.stopPropagation();        await navigator.clipboard.writeText(shareUrl);

                          handleEditEntry(entry);        toast.success('Profile link copied to clipboard!');

                        }}      } else {

                      >        throw new Error('Clipboard not supported');

                        <Edit className="w-4 h-4" />      }

                      </Button>    } catch (error) {

                      <Button      console.error('Failed to copy to clipboard:', error);

                        variant="ghost"      // Show the URL in a prompt for manual copying

                        size="sm"      prompt('Copy this link:', shareUrl);

                        className="h-8 w-8 p-0 hover:bg-red-100 hover:text-red-600"    }

                        onClick={(e) => {  };

                          e.stopPropagation();

                          handleDeleteEntry(entry.id);  const formatEntryDate = (date: bigint) =>

                        }}    new Date(Number(date) / 1_000_000).toLocaleDateString('en-US', {

                      >      year: 'numeric', month: 'long', day: 'numeric'

                        <Trash2 className="w-4 h-4" />    });

                      </Button>

                      {entry.isPublic && (  const truncateContent = (content: string, maxLength = 200) =>

                        <Button    content.length <= maxLength ? content : content.substring(0, maxLength) + '...';

                          variant="ghost"

                          size="sm"  if (isLoading) {

                          className="h-8 w-8 p-0 hover:bg-blue-100"    return (

                          onClick={(e) => {      <div className="min-h-screen flex flex-col">

                            e.stopPropagation();        <div className="flex items-center justify-center flex-1">

                            navigator.share?.({          <div className="text-center">

                              title: entry.title,            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4"></div>

                              url: window.location.origin + `/entry/${identity?.getPrincipal().toString()}/${entry.id}`            <p className="text-muted-foreground">Loading your journal...</p>

                            }).catch(() => {          </div>

                              navigator.clipboard.writeText(        </div>

                                window.location.origin + `/entry/${identity?.getPrincipal().toString()}/${entry.id}`      </div>

                              );    );

                              toast.success('Link copied to clipboard!');  }

                            });

                          }}  if (error) {

                        >    return (

                          <Share2 className="w-4 h-4" />      <div className="min-h-screen flex flex-col">

                        </Button>        <div className="flex items-center justify-center flex-1">

                      )}          <div className="text-center">

                    </div>            <p className="text-red-600 mb-4">Error loading your journal: {error.message}</p>

                  </div>            <Button onClick={() => window.location.reload()}>Retry</Button>

                </CardContent>          </div>

              </Card>        </div>

            ))}      </div>

          </div>    );

        ) : (  }

          <div className="text-center py-16">

            <div className="bg-purple-100 w-24 h-24 rounded-full flex items-center justify-center mx-auto mb-6">  const profile = homepage?.profile;

              <BookOpen className="w-12 h-12 text-purple-600" />  const entries = homepage?.entries || [];

            </div>

            <h3 className="text-xl font-semibold text-gray-900 mb-2">Start Your Journal Journey</h3>  return (

            <p className="text-gray-600 mb-6 max-w-md mx-auto">    <div className="min-h-screen flex flex-col">

              Begin capturing your thoughts, experiences, and memories. Your first entry is just a click away.      <div className="container mx-auto px-4 max-w-[1024px] flex-1 pb-8">

            </p>        {/* Profile Section */}

            <Button onClick={handleNewEntry} className="bg-purple-600 hover:bg-purple-700 text-white">        <Card className="pt-0 mt-8 mb-8 border-0 shadow-xl bg-white/80 backdrop-blur-sm overflow-hidden">

              <Plus className="w-4 h-4 mr-2" />          <div className="relative">

              Create Your First Entry            <div className="h-48 bg-gradient-to-r from-purple-400 to-blue-400 relative overflow-hidden">

            </Button>              {profile?.coverImage && profile.coverImage.length > 0 ? (

          </div>                <img 

        )}                  src={profile.coverImage[0]} 

      </div>                  alt="Cover image"

                  className="w-full h-full object-cover"

      {/* Modals */}                />

      {showEntryModal && (              ) : null}

        <JournalEntryModal              <Button

          entry={editingEntry}                onClick={() => setShowProfileModal(true)}

          onClose={() => {                variant="outline"

            setShowEntryModal(false);                size="sm"

            setEditingEntry(null);                className="absolute top-4 right-4 bg-white/90 backdrop-blur-sm border-white/50 hover:bg-white text-gray-700 shadow-lg"

          }}              >

        />                <Edit className="w-4 h-4" />

      )}              </Button>

            </div>

      {showProfileModal && (            <div className="absolute left-6 -bottom-12">

        <ProfileEditModal              <Avatar className="w-24 h-24 border-4 border-white shadow-lg">

          onClose={() => setShowProfileModal(false)}                <AvatarImage 

        />                  src={profile?.profilePicture && profile.profilePicture.length > 0 ? profile.profilePicture[0] : undefined}

      )}                  alt={`${profile?.name || 'User'}'s profile picture`}

                  className="object-cover"

      {showProfileSetupModal && (                />

        <ProfileSetupModal                <AvatarFallback className="bg-gradient-to-br from-purple-400 to-blue-400 text-white text-3xl font-bold">

          onClose={() => setShowProfileSetupModal(false)}                  {profile?.name?.charAt(0).toUpperCase() || '?'}

        />                </AvatarFallback>

      )}              </Avatar>

    </div>            </div>

  );          </div>

}          <CardContent className="px-6 pt-6">
            <h2 className="text-3xl text-gray-900 mt-1 mb-1">
              {profile?.name || 'Anonymous Writer'}
            </h2>
            {profile?.bio && <p className="text-gray-600 text-lg mb-2">{profile.bio}</p>}
            <div className="flex items-center space-x-4 text-sm text-gray-500">
              <span>{entries.length} journal entries</span>
              <span>{entries.filter(e => e.isPublic).length} public</span>
              <span>{entries.filter(e => !e.isPublic).length} private</span>
            </div>
          </CardContent>
        </Card>

        {/* Journal Entries Section */}
        <div className="flex items-center justify-between mb-6">
          <h3 className="text-2xl text-gray-900">My Journal Entries</h3>
          <div className="flex space-x-2">
            <Button
              onClick={handleShare}
              variant="outline"
              size="sm"
              className="border-purple-200 hover:bg-purple-50"
            >
              <Share2 className="w-4 h-4 mr-2" />
              Share
            </Button>





            <Button
              onClick={handleNewEntry}
              className="bg-gradient-to-r from-purple-500 to-blue-500 hover:from-purple-600 hover:to-blue-600 text-white shadow-lg"
            >
              {/* <Plus className="w-4 h-4 mr-2" /> */}
              New
            </Button>
          </div>
        </div>

        {entries.length === 0 ? (
          <Card className="border-2 border-dashed border-purple-200 bg-purple-50/50 mb-8">
            <CardContent className="p-12 text-center">
              <h4 className="text-xl font-semibold text-gray-700 mb-2">Start Your Journey!</h4>
              <p className="text-gray-600 mb-6">
                Your journal is empty. Write your first entry and begin capturing your amazing adventures!
              </p>
              <Button 
                onClick={handleNewEntry}
                className="bg-blue-500 hover:bg-blue-600 text-white font-semibold px-8 py-7 text-xl rounded-full shadow-md transition transform hover:scale-105 active:scale-95 mx-auto flex items-center gap-2"
              >
                💖  Write First Entry
              </Button>
            </CardContent>
          </Card>
        ) : (
          <div className="space-y-6 mb-8">
            {entries
              .sort((a, b) => Number(b.date) - Number(a.date))
              .map((entry) => (
                <Card 
                  key={entry.id}
                  className="border-0 shadow-lg bg-white/80 backdrop-blur-sm hover:shadow-xl transition-all cursor-pointer group gap-0"
                  onClick={() => handleEntryClick(entry)}
                >
                  <CardHeader className="pb-1">
                    <div className="flex items-start justify-between">
                      <div className="flex-1">
                        <CardTitle className="text-xl font-bold text-gray-900 group-hover:text-purple-600 transition-colors mb-2">
                          {entry.title}
                        </CardTitle>
                        <div className="flex items-center space-x-3">
                          <span className="text-sm text-gray-500">
                            {formatEntryDate(entry.date)}
                          </span>
                          <Badge variant={entry.isPublic ? "default" : "secondary"} className="text-xs">
                            {entry.isPublic ? (
                              <>
                                <Globe className="w-3 h-3 mr-1" />
                                Public
                              </>
                            ) : (
                              <>
                                <Lock className="w-3 h-3 mr-1" />
                                Private
                              </>
                            )}
                          </Badge>
                        </div>
                      </div>
                      <div className="flex items-center space-x-2 opacity-0 group-hover:opacity-100 transition-opacity ml-4">
                        <Button
                          onClick={(e) => {
                            e.stopPropagation();
                            handleEditEntry(entry);
                          }}
                          variant="ghost"
                          size="sm"
                          className="text-gray-500 hover:text-purple-600"
                        >
                          <Edit className="w-4 h-4" />
                        </Button>
                        <Button
                          onClick={(e) => {
                            e.stopPropagation();
                            handleDeleteEntry(entry.id);
                          }}
                          variant="ghost"
                          size="sm"
                          className="text-gray-500 hover:text-red-600"
                        >
                          <Trash2 className="w-4 h-4" />
                        </Button>
                      </div>
                    </div>
                  </CardHeader>
<CardContent className="pt-1">
  <div className="flex gap-4">
    <div className="flex-1 min-w-0">
      <div
        className="text-gray-700 leading-relaxed line-clamp-3"
        dangerouslySetInnerHTML={{ __html: renderContent(entry.content) }}
      />
      {entry.content.length > 200 && (
        <p className="text-purple-600 text-sm mt-2 font-medium">
          Click to read more...
        </p>
      )}
    </div>
  </div>
</CardContent>

                </Card>
              ))}
          </div>
        )}
      </div>

      {/* Modals */}
      {showEntryModal && (
        <JournalEntryModal
          entry={editingEntry}
          onClose={() => {
            setShowEntryModal(false);
            setEditingEntry(null);
          }}
        />
      )}

      {showProfileModal && (
        <ProfileEditModal
          onClose={() => setShowProfileModal(false)}
        />
      )}

      {showProfileSetupModal && (
        <ProfileSetupModal
          onClose={() => setShowProfileSetupModal(false)}
        />
      )}
    </div>
  );
}
}
